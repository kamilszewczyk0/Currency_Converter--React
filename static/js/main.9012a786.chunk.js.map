{"version":3,"sources":["Form/Result/index.js","currencies.js","Form/index.js","Footer/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Result","result","undefined","className","targetAmount","toFixed","currency","currencies","id","shorthand","fullName","value","Form","calculateFinalAmount","useState","setCurrency","amount","setAmount","onSubmit","event","preventDefault","onChange","target","name","type","min","step","placeholder","required","map","key","Footer","href","Container","children","App","setResult","rate","find","sourceAmount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAkBeA,G,MAfA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACE,yCACcC,IAAXD,GACC,uBAAGE,UAAU,qBAAb,mBAEE,uCACSF,EAAOG,aAAaC,QAAQ,GADrC,OAC+CJ,EAAOK,cCVnDC,EAAa,CACxB,CACEC,GAAI,EACJC,UAAW,MACXC,SAAU,OACVC,MAAO,UAET,CACEH,GAAI,EACJC,UAAW,MACXC,SAAU,sBACVC,MAAO,UAET,CACEH,GAAI,EACJC,UAAW,MACXC,SAAU,kBACVC,MAAO,UAET,CACEH,GAAI,EACJC,UAAW,MACXC,SAAU,gBACVC,MAAO,UAET,CACEH,GAAI,EACJC,UAAW,MACXC,SAAU,iBACVC,MAAO,WCiCIC,G,MAzDF,SAAC,GAAoC,IAAnCX,EAAkC,EAAlCA,OAAQY,EAA0B,EAA1BA,qBAA0B,EACfC,mBAASP,EAAW,GAAGE,WADR,mBACxCH,EADwC,KAC9BS,EAD8B,OAGnBD,mBAAS,MAHU,mBAGxCE,EAHwC,KAGhCC,EAHgC,KAU/C,OACE,0BAAMd,UAAU,OAAOe,SANR,SAACC,GAChBA,EAAMC,iBACNP,EAAqBP,EAAUU,KAK7B,8BAAUb,UAAU,aAClB,4BAAQA,UAAU,mBAAlB,yBACA,6BAASA,UAAU,WACjB,2BAAOA,UAAU,qBACf,0BAAMA,UAAU,oBAAhB,YACW,uCADX,6BAGA,2BACEQ,MAAOK,EACPK,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcL,EAAUK,EAAOX,QACzCY,KAAK,SACLpB,UAAU,yBACVqB,KAAK,SACLC,IAAI,IACJC,KAAK,OACLC,YAAY,mBACZC,UAAQ,MAId,6BAASzB,UAAU,WACjB,2BAAOA,UAAU,uBACf,0BAAMA,UAAU,oBAAhB,iCAGA,4BACEQ,MAAOL,EACPiB,KAAK,eACLpB,UAAU,0BACVkB,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcP,EAAYO,EAAOX,SAC1CJ,EAAWsB,KAAI,SAACvB,GAAD,OACd,4BAAQwB,IAAKxB,EAASG,UAAWE,MAAOL,EAASG,WAAjD,UACMH,EAASG,UADf,aAC6BH,EAASI,SADtC,YAOR,4BAAQP,UAAU,kBAAlB,gBACA,kBAAC,EAAD,CAAQF,OAAQA,QCnCT8B,G,MAlBA,WACb,OACE,4BAAQ5B,UAAU,UAChB,sEAEE,uBACEA,UAAU,eACV6B,KAAK,iCACLV,OAAO,UAHT,yBAFF,4BAUA,0DCTSW,G,MAJG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAClB,OAAO,6BAAS/B,UAAU,aAAa+B,KCuB1BC,MArBf,WAAgB,IAAD,EACerB,qBADf,mBACNb,EADM,KACEmC,EADF,KAab,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMnC,OAAQA,EAAQY,qBAZG,SAACP,EAAUU,GACtC,IAAMqB,EAAO9B,EAAW+B,MAAK,qBAAE7B,YAA6BH,KAAUK,MAEtEyB,EAAU,CACRG,cAAevB,EACfZ,aAAcY,EAASqB,EACvB/B,gBAOA,kBAAC,EAAD,QCVckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9012a786.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Result = ({result}) => {\r\n  return (\r\n    <>\r\n      {result !== undefined && (\r\n        <p className=\"converter__result\">\r\n          You will receive\r\n          <strong>\r\n            &nbsp;{result.targetAmount.toFixed(2)}&nbsp;{result.currency}\r\n          </strong>\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","export const currencies = [\r\n  {\r\n    id: 1,\r\n    shorthand: \"EUR\",\r\n    fullName: \"Euro\",\r\n    value: \"4.4508\",\r\n  },\r\n  {\r\n    id: 2,\r\n    shorthand: \"USD\",\r\n    fullName: \"United States Dolar\",\r\n    value: \"3.7533\",\r\n  },\r\n  {\r\n    id: 3,\r\n    shorthand: \"NOK\",\r\n    fullName: \"Norwegian Krone\",\r\n    value: \"0.4223\",\r\n  },\r\n  {\r\n    id: 4,\r\n    shorthand: \"RUB\",\r\n    fullName: \"Russian Ruble\",\r\n    value: \"0.0500\",\r\n  },\r\n  {\r\n    id: 5,\r\n    shorthand: \"GBP\",\r\n    fullName: \"Pound Sterling\",\r\n    value: \"4.9953\",\r\n  },\r\n];\r\n","import React, {useState} from \"react\";\r\nimport Result from \"./Result\";\r\nimport {currencies} from \"../currencies\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({result, calculateFinalAmount}) => {\r\n  const [currency, setCurrency] = useState(currencies[0].shorthand);\r\n\r\n  const [amount, setAmount] = useState(\"10\");\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateFinalAmount(currency, amount);\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onSubmit}>\r\n      <fieldset className=\"converter\">\r\n        <legend className=\"converter__name\">Currency converter v2</legend>\r\n        <section className=\"section\">\r\n          <label className=\"converter__amount\">\r\n            <span className=\"converter__label\">\r\n              How much <strong>PLN</strong> do You want to exchange?\r\n            </span>\r\n            <input\r\n              value={amount}\r\n              onChange={({target}) => setAmount(target.value)}\r\n              name=\"amount\"\r\n              className=\"converter__amountValue\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              step=\"0.01\"\r\n              placeholder=\"Enter the amount\"\r\n              required\r\n            />\r\n          </label>\r\n        </section>\r\n        <section className=\"section\">\r\n          <label className=\"converter__currency\">\r\n            <span className=\"converter__label\">\r\n              Choose the currency You want:\r\n            </span>\r\n            <select\r\n              value={currency}\r\n              name=\"currencyList\"\r\n              className=\"converter__currencyList\"\r\n              onChange={({target}) => setCurrency(target.value)}>\r\n              {currencies.map((currency) => (\r\n                <option key={currency.shorthand} value={currency.shorthand}>\r\n                  {`${currency.shorthand} (${currency.fullName})`}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        </section>\r\n        <button className=\"converter__btn\">Let's see...</button>\r\n        <Result result={result} />\r\n      </fieldset>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p>\r\n        Currency exchange courses based on&thinsp;\r\n        <a\r\n          className=\"footer__link\"\r\n          href=\"https://kursy-walut.mybank.pl/\"\r\n          target=\"_blanc\">\r\n          kursy-walut.mybank.pl\r\n        </a>\r\n        &thinsp;from day 4.09.2020\r\n      </p>\r\n      <p>Â© Kamil Szewczyk 2020</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => {\r\n  return <section className=\"container\">{children}</section>;\r\n};\r\n\r\nexport default Container;\r\n","import React, {useState} from \"react\";\nimport Form from \"./Form\";\nimport Footer from \"./Footer\";\nimport Container from \"./Container\";\nimport {currencies} from \"./currencies\";\n\nfunction App() {\n  const [result, setResult] = useState();\n\n  const calculateFinalAmount = (currency, amount) => {\n    const rate = currencies.find(({shorthand}) => shorthand === currency).value;\n\n    setResult({\n      sourceAmount: +amount,\n      targetAmount: amount / rate,\n      currency,\n    });\n  };\n\n  return (\n    <Container>\n      <Form result={result} calculateFinalAmount={calculateFinalAmount} />\n      <Footer />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}